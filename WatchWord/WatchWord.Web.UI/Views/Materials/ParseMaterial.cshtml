@using WatchWord.Web.UI.Models.Materials
@using WatchWord.Web.UI.Infrastructure.Helpers
@model ParseMaterialViewModel
@{
    ViewBag.Title = "Parse material";
}

<div class="row">
    <div class="col-sm-offset-3 col-sm-6 fuelux">
        @using (Html.BeginForm("ParseMaterial", "Materials", FormMethod.Post, new { enctype = "multipart/form-data", id = "file-form" }))
        {
            <div class="row">
                <!--Name input-->
                <div class="form-group">
                    @Html.LabelFor(n => n.Name)
                    @Html.TextBoxFor(n => n.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(n => n.Name)
                </div>
            </div>
            <div class="row">
                <!--Image input-->
                <div class="form-group">
                    @Html.LabelFor(n => n.Image, new { @class = "control-label" })
                    @Html.TextBoxFor(n => n.Image, new { type = "file" })
                    <div class="input-group ">
                        <input class="form-control" type="text" readonly placeholder="@Html.NameFor(n => n.Image)" />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-primary fileHandler"><span class="glyphicon glyphicon-folder-open"></span> Browse</button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(n => n.Image)
                </div>
            </div>
            <div class="row">
                <!-- Film or series radios-->
                <div class="form-group">
                    <div id="radioGroup" class="btn-group" data-toggle="buttons">
                        @Html.BootstrapEnumRadioFor(n => n.Type)
                    </div>
                </div>
            </div>
            <!--Season and episod number inputs-->
            <div id="series">
                <div class="row">
                    <div class="row">
                        <div class="col-xs-12 col-sm-6">
                            @Html.LabelFor(n => n.SeasonNumber, new { @class = "control-label" })
                            <div class="form-group">
                                <div class="spinbox" data-initialize="spinbox">
                                    @Html.TextBoxFor(n => n.SeasonNumber, new { @class = "form-control input-mini spinbox-input" })
                                    <div class="spinbox-buttons btn-group btn-group-vertical">
                                        <button type="button" class="btn btn-default spinbox-up btn-xs">
                                            <span class="glyphicon glyphicon-chevron-up"></span><span class="sr-only">Increase</span>
                                        </button>
                                        <button type="button" class="btn btn-default spinbox-down btn-xs">
                                            <span class="glyphicon glyphicon-chevron-down"></span><span class="sr-only">Decrease</span>
                                        </button>
                                    </div>
                                    @Html.ValidationMessageFor(n => n.SeasonNumber)
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6">
                            @Html.LabelFor(n => n.EpisodeNumber, new { @class = "control-label" })
                            <div class="form-group">
                                <div class="spinbox" data-initialize="spinbox">
                                    @Html.TextBoxFor(n => n.EpisodeNumber, new { @class = "form-control input-mini spinbox-input" })
                                    <div class="spinbox-buttons btn-group btn-group-vertical">
                                        <button type="button" class="btn btn-default spinbox-up btn-xs">
                                            <span class="glyphicon glyphicon-chevron-up"></span><span class="sr-only">Increase</span>
                                        </button>
                                        <button type="button" class="btn btn-default spinbox-down btn-xs">
                                            <span class="glyphicon glyphicon-chevron-down"></span><span class="sr-only">Decrease</span>
                                        </button>
                                    </div>
                                    @Html.ValidationMessageFor(n => n.EpisodeNumber)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <!--File input-->
                <div class="form-group">
                    @Html.LabelFor(n => n.File, new { @class = "control-label" })
                    @Html.TextBoxFor(n => n.File, new { type = "file" })
                    <div class="input-group ">
                        <input class="form-control" type="text" readonly placeholder="@Html.NameFor(n => n.File)" />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-primary fileHandler"><span class="glyphicon glyphicon-folder-open"></span> Browse</button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(n => n.File)
                </div>
            </div>
            <div class="row">
                <!--Description input-->
                <div class="form-group">
                    @Html.LabelFor(n => n.Description, new { @class = "form-label" })
                    @Html.TextAreaFor(n => n.Description, new { @class = "form-control" })
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <input type="submit" value="Send" class="btn btn-primary" />
                </div>
            </div>

        }
    </div>
</div>

@section Css{
    <link href="//www.fuelcdn.com/fuelux/3.6.3/css/fuelux.min.css" rel="stylesheet">
}

@section Scripts{
    @Scripts.Render("~/Scripts/validation")
    <script src="~/Scripts/spinBox.js"></script>
    <script>
        //$(".fileHandler").on("click", function (e) {
        //    $(this).closest(".form-group").find("input").click();
        //});
        //$(":input").on("change", function (e) {
        //    var isValid = $("#file-form").validate().element(this);
        //    if (isValid) {
        //        var $formGroup = $(this).closest(".form-group")
        //        $formGroup.find(".form-control").val($(this).val().match(/[^\\]*$/)[0]);
        //        if (!$formGroup.find(".removeBtn").length) {
        //            var $removeBtn = $("<button>").addClass("btn btn-primary removeBtn").text("Remove");
        //            $formGroup.find(".input-group-btn").prepend($removeBtn);
        //        }
        //    }
        //});
        //$(".input-group-btn").on("click", ".removeBtn", function () {
        //    var $formGroup = $(this).closest(".form-group");
        //    $formGroup.find(":file").val("");
        //    $formGroup.find(".removeBtn").remove();
        //    $formGroup.find(".form-control").val("");
        //});

        $(".fileHandler").each(function () {
            var $formGroup = $(this).closest(".form-group");
            var $removeBtn = $("<button>").addClass("btn btn-primary removeBtn").text("Remove");
            var $file = $formGroup.find(":file");
            var $formControl = $formGroup.find(".form-control");

            function fileIsExist() {
                $formControl.val($file.val().match(/[^\\]*$/)[0]);
                if (!$formGroup.find(".removeBtn").length) {
                    $formGroup.find(".input-group-btn").prepend($removeBtn);
                }
            }

            if ($file.val()) {
                fileIsExist();
            }

            $(this).on("click", function (e) {
                $file.click();
            });

            $file.on("change", function (e) {
                var isValid = $("#file-form").validate().element(this);
                if (isValid) {
                    fileIsExist();
                }
            });

            $formGroup.find(".input-group-btn").on("click", ".removeBtn", function () {
                $file.val("");
                $formGroup.find(".removeBtn").remove();
                $formGroup.find(".form-control").val("");
            });
        });
    </script>
}