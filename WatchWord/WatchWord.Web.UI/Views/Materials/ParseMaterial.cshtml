@using WatchWord.Domain.Entity
@using WatchWord.Web.UI.Models.Materials
@model ParseMaterialViewModel

@{
    var defaultType = Enum.GetName(typeof(MaterialType), default(MaterialType));
    Func<string, bool> isChecked = value => StringComparer.InvariantCultureIgnoreCase.Compare(value, defaultType) == 0;
}
<div class="fileForm col-xs-5 fuelux">
    @using (Html.BeginForm("ParseMaterial", "Materials", FormMethod.Post, new { enctype = "multipart/form-data", id = "file-form" }))
    {
        <div class="row">
            <div class="form-group">
                @Html.LabelFor(n => n.Name)
                @Html.TextBoxFor(n => n.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(n => n.Name)
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                @Html.LabelFor(n => n.Image, new { @class = "control-label" })
                @Html.TextBoxFor(n => n.Image, new { type = "file" })
                <div class="input-group ">
                    <input class="form-control" type="text" readonly placeholder="@Html.NameFor(n => n.Image)" />
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-primary fileHandler"><span class="glyphicon glyphicon-folder-open"></span> Browse</button>
                    </span>
                </div>
                @Html.ValidationMessageFor(n => n.Image)
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                <div id="radioGroup" class="btn-group" data-toggle="buttons">
                    @foreach (var value in Enum.GetNames(typeof(MaterialType)))
                    {
                        <label class="btn btn-primary @(isChecked(value)? "active" : "")">
                            @Html.RadioButton("type", value, isChecked(value)) @value
                        </label>
                    }
                </div>
            </div>
        </div>
        <div id="series">
            <div class="row">
                <div class="row">
                    <div class="col-xs-12 col-sm-6">
                        @Html.LabelFor(n => n.SeasonNumber, new { @class = "control-label" })
                        <div class="form-group">
                            <div class="spinbox" data-initialize="spinbox">
                                @Html.TextBoxFor(n => n.SeasonNumber, new { @class = "form-control input-mini spinbox-input" })
                                <div class="spinbox-buttons btn-group btn-group-vertical">
                                    <button type="button" class="btn btn-default spinbox-up btn-xs">
                                        <span class="glyphicon glyphicon-chevron-up"></span><span class="sr-only">Increase</span>
                                    </button>
                                    <button type="button" class="btn btn-default spinbox-down btn-xs">
                                        <span class="glyphicon glyphicon-chevron-down"></span><span class="sr-only">Decrease</span>
                                    </button>
                                </div>
                                @Html.ValidationMessageFor(n => n.SeasonNumber)
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-6">
                        @Html.LabelFor(n => n.EpisodeNumber, new { @class = "control-label" })
                        <div class="form-group">
                            <div class="spinbox" data-initialize="spinbox">
                                @Html.TextBoxFor(n => n.EpisodeNumber, new { @class = "form-control input-mini spinbox-input" })
                                <div class="spinbox-buttons btn-group btn-group-vertical">
                                    <button type="button" class="btn btn-default spinbox-up btn-xs">
                                        <span class="glyphicon glyphicon-chevron-up"></span><span class="sr-only">Increase</span>
                                    </button>
                                    <button type="button" class="btn btn-default spinbox-down btn-xs">
                                        <span class="glyphicon glyphicon-chevron-down"></span><span class="sr-only">Decrease</span>
                                    </button>
                                </div>
                                @Html.ValidationMessageFor(n => n.EpisodeNumber)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                @Html.LabelFor(n => n.File, new { @class = "control-label" })
                @Html.TextBoxFor(n => n.File, new { type = "file" })
                <div class="input-group ">
                    <input class="form-control" type="text" readonly placeholder="@Html.NameFor(n => n.File)" />
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-primary fileHandler"><span class="glyphicon glyphicon-folder-open"></span> Browse</button>
                    </span>
                </div>
                @Html.ValidationMessageFor(n => n.File)
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                @Html.LabelFor(n => n.Description, new { @class = "form-label" })
                @Html.TextAreaFor(n => n.Description, new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                <input type="submit" value="Send" class="btn btn-primary" />
            </div>
        </div>

    }
</div>

@section Css{
    <link href="//www.fuelcdn.com/fuelux/3.6.3/css/fuelux.min.css" rel="stylesheet">
}

@section Scripts{
    @Scripts.Render("~/Scripts/validation")
    <script src="~/Scripts/spinBox.js"></script>
    <script>
        $(function () {
            $(".form-group input:file").each(function () {
                var formGroup = $(this).closest(".form-group");
                var file = formGroup.find("input:file");
                var input = formGroup.find("input.form-control");
                var removeButton = $("<button>").attr("type", "button").addClass("btn btn-primary removeButton").text("Remove");

                function addRemoveButton() {
                    formGroup.find(".input-group-btn").prepend(removeButton);
                    removeButton = null;
                }

                if (file.val()) {
                    addRemoveButton();
                }

                formGroup.on("click", ".removeButton", function () {
                    file.val("");
                    input.val("");
                    removeButton = $(this).detach(".removeButton");
                });

                formGroup.find(".fileHandler").on("click", function () {
                    file.click();
                });

                file.on("change", function () {
                    input.val(file.val());
                    if (removeButton) {
                        addRemoveButton();
                    }
                });
            });

            var series = $("#series");

            function toggleSeries(series, value) {
                if (value === "Series") {
                    series.show();
                } else {
                    series.hide();
                }
            }

            toggleSeries(series, $("#radioGroup input:radio[checked]").val());

            $("#radioGroup label").on("click", function () {
                var value = $(this).find("input:radio").val();
                toggleSeries(series, value);
            });
        });
    </script>
}
