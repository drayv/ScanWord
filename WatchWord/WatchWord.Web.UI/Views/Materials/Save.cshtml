@using WatchWord.Domain.Entity
@model WatchWord.Web.UI.Models.Materials.MaterialViewModel
@{
    ViewBag.Title = "Save material";
}

<div class="materialInfo">
    <div class="row">
        <!--Basic info-->
        <div id="img-container" class="col-md-3 col-sm-4 col-xs-12 text-center">
            <img src="@Model.Image" width="@Model.ImageWidth" height="@Model.ImageHeight" alt="Image" />
        </div>
        <div class="col-md-9 col-sm-8 col-xs-12">
            <h2 id="material-name">@Model.Name</h2>
            <div>
                @Model.Description
            </div>
        </div>
    </div>
    <div class="row">
        <div id="save-buttons-container" class="col-xs-12 col-sm-4 col-md-3">
            <div class="row">
                <button class="btn btn-primary material-act-button" id="goBack">Back</button>
                @using (Html.BeginForm("Save"))
                {
                    <input type="submit" value="Save" class="btn btn-success material-act-button" />
                }
            </div>
        </div>
    </div>

    <!--Parsed words-->
    <div class="words">
        @foreach (var word in Model.Words)
        {
            string typeWord;
            switch (word.Type)
            {
                case VocabType.KnownWord:
                    typeWord = "known-word";
                    break;
                case VocabType.LearnWord:
                    typeWord = "learn-word";
                    break;
                case VocabType.NewWord:
                    typeWord = "new-word";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            <div class=@typeWord>
                <div class="translation">@word.Translation</div>
                <div class="origin">@word.Word</div>
            </div>
        }
    </div>
</div>



@section Scripts {
    <script>
        $("#goBack").on("click", function () {
            window.history.back();
        });


        $(function () {
            function contextMenuClick(key, options) {
                var word = options.$trigger.html() || "";
                var m = "clicked: " + key + ", " + options.selector + ", " + word;
                window.console && console.log(m) || alert(m);
            }

            $.contextMenu({
                selector: ".origin",
                trigger: "left",
                callback: contextMenuClick,
                items: {
                    "deleteWord": { name: "Delete word from material" }
                }
            });
        });
    </script>
}