@using WatchWord.Domain.Entity
@model WatchWord.Web.UI.Models.Materials.MaterialViewModel
@{
    ViewBag.Title = Model.Name;
}

<div class="materialInfo">
    <!--Basic info-->
    <img src="@Model.Image" width="@Model.ImageWidth" height="@Model.ImageHeight" alt="Image" />
    <div><span id="material-name">@Model.Name</span></div>
    <div><span id="material-description">@Model.Description</span></div>
    <br />
    <!--Parsed words-->
    <div class="words">
        @foreach (var word in Model.Words)
        {
            string typeWord;
            switch (word.Type)
            {
                case VocabType.KnownWord:
                    typeWord = "known-word";
                    break;
                case VocabType.LearnWord:
                    typeWord = "learn-word";
                    break;
                case VocabType.NewWord:
                    typeWord = "new-word";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            <div class=@typeWord>
                <div class="translation">@word.Translation</div>
                <div class="origin">@word.Word</div>
            </div>
        }
    </div>
    <!--Save word-->
    <div id="save-word-modal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Chose action and translation for word: </h4>
                    <div id="radioGroup" class="btn-group" data-toggle="buttons">
                        <label class="btn btn-primary btn-sm active">
                            <input class="add-vocab-button" type="radio" value="InsertLearnWord" name="VocabAction"
                                   data-val-required="The Vocabulary field is required." data-val="true" checked="checked">
                            Add to Learning
                        </label>
                        <label class="btn btn-primary btn-sm">
                            <input class="add-vocab-button" type="radio" value="InsertKnownWord" name="VocabAction">
                            Add to Known
                        </label>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="modal-buttons">
                    </div>
                </div>
                <div class="modal-footer">
                    <label class="other-actions">Other actions</label>
                    <label class="other-actions" data-dismiss="modal">Close</label>
                </div>
            </div>
        </div>
    </div>
    <!--For outer JS-->
    <script>
        var insertLearnWordRoute = "@Url.Action("InsertLearnWord", "Vocabulary")";
        var insertKnownWordRoute = "@Url.Action("InsertKnownWord", "Vocabulary")";
        var getTranslationsRoute = "@Url.Action("GetTranslations", "Vocabulary")";
        var isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();
        var logInRoute = "@Url.Action("LogIn", "Account")";
    </script>
</div>
@section Scripts {
    <script>
        $(function() {

            /* Cache */

            var $saveWordHeader = $(".modal-title");
            var $saveWordButtons = $("#save-word-modal .modal-buttons");
            var $wordClickTrigger;

            /* Word click */

            $(".origin").on("click", function() {
                wordClick($(this));
            });

            function wordClick(trigger) {
                $wordClickTrigger = trigger;
                showModalForWord(trigger.text() || "");
            }

            /* Translate word */

            function showModalForWord(word) {
                $saveWordHeader.html("Chose action and translation for word: " + word);
                $saveWordButtons.html("");
                $("#save-word-modal").modal("show");
                fillTranslations(word);
            }

            function fillTranslations(word) {
                $.ajax({
                    type: "GET",
                    url: getTranslationsRoute,
                    contentType: "application/json; charset=utf-8",
                    data: { word: word },
                    async: true,
                    cache: false,
                    success: function(translations) {
                        for (var i = 0; i < translations.length; i++) {
                            var $newModalButton = $("<div>").addClass("modal-button");
                            var $newWord = $("<div>").addClass("origin btn-block save").html(translations[i]);
                            $newModalButton.append($newWord);
                            $saveWordButtons.append($newModalButton);

                            $newWord.on("click", function() {
                                if (!isAuthenticated) {
                                    showAutintificateError();
                                } else {
                                    insertWordToVocab(word, $(this).html());
                                    $("#save-word-modal").modal('hide');
                                }
                            });
                        }
                    },
                    error: function(error) {
                        alert("Error: " + error.statusText);
                    }
                });
            }

            function showAutintificateError() {
                $saveWordButtons.html("");
                var $alert = $("<div>").addClass("alert alert-warning")
                    .html("To add words to the vocabulary, please create an account.");
                var $logIn = $('<a>', { text: 'Click here to create one.',
                    title: 'Click here to create one.', href: logInRoute }); //TODO: ReturnUrl

                $saveWordButtons.append($alert);
                $saveWordButtons.append($logIn);
            }

            /* Save word */

            function insertWordToVocab(word, translation) {
                var vocabAction = getVocabAction();
                $.ajax({
                    type: "POST",
                    dataType: "json",
                    url: getVocabActionRoute(vocabAction),
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ word: word, translation: translation }),
                    async: true,
                    cache: false,
                    success: function() {
                        updateWordHtml(vocabAction, word, translation);
                    },
                    error: function(error) {
                        alert("Error: " + error.statusText);
                    }
                });
            }

            function updateWordHtml(vocabAction, word, translation) {
                var $word = $wordClickTrigger.parent();

                if (vocabAction === "InsertLearnWord") {
                    $word.removeClass().addClass("learn-word");
                } else if (vocabAction === "InsertKnownWord") {
                    $word.removeClass().addClass("known-word");
                }

                $word.children(".translation").html(translation);
            }

            function getVocabAction() {
                return $('.active > .add-vocab-button').attr('value');
            }

            function getVocabActionRoute(action) {
                switch (action) {
                    case "InsertLearnWord":
                        return insertLearnWordRoute;
                    case "InsertKnownWord":
                        return insertKnownWordRoute;
                    default:
                        return "";
                }
            }
        });
    </script>
}