@using WatchWord.Domain.Entity
@model WatchWord.Web.UI.Models.Materials.MaterialViewModel
@{
    ViewBag.Title = Model.Name;
}

<div class="materialInfo">
    <!--Basic info-->
    <img src="@Model.Image" width="@Model.ImageWidth" height="@Model.ImageHeight" alt="Image" />
    <div><span id="material-name">@Model.Name</span></div>
    <div><span id="material-description">@Model.Description</span></div>
    <br />
    <!--Parsed words-->
    <div class="words">
        @foreach (var word in Model.Words)
        {
            string typeWord;
            switch (word.Type)
            {
                case VocabType.KnownWord:
                    typeWord = "known-word";
                    break;
                case VocabType.LearnWord:
                    typeWord = "learn-word";
                    break;
                case VocabType.NewWord:
                    typeWord = "new-word";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            <div class=@typeWord>
                <div class="translation">@word.Translation</div>
                <div class="origin">@word.Word</div>
            </div>
        }
    </div>
    <!--Save word-->
    <div id="save-word-modal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Select the translation</h4>
                </div>
                <div class="modal-body">
                    <div class="modal-buttons">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--For JS-->
    <div id="InsertLearnWord" route="@Url.Action("InsertLearnWord", "Vocabulary")"></div>
    <div id="InsertKnownWord" route="@Url.Action("InsertKnownWord", "Vocabulary")"></div>
    <div id="GetTranslations" route="@Url.Action("GetTranslations", "Vocabulary")"></div>
</div>

@section Scripts {
    <script>
        $(function () {

            /* Cache */

            var $saveWordHeader = $("#save-word-modal h4");
            var $saveWordButtons = $("#save-word-modal .modal-buttons");
            var $contaxtMenuTrigger = null;

            /* Context menu */

            function contextMenuClick(key, options) {
                if (key === "addToLearnWords" || key === "addToKnownWords") {
                    $contaxtMenuTrigger = options.$trigger;
                    translateOrigin(key, $contaxtMenuTrigger.html() || "");
                }
            }

            $.contextMenu({
                selector: ".known-word > .origin",
                trigger: "left",
                callback: contextMenuClick,
                items: {
                    "addToLearnWords": { name: "Move to learning words" },
                    separator: "---------",
                    "removeFromVocabulary": { name: "Remove from vocabulary" }
                }
            });

            $.contextMenu({
                selector: ".learn-word > .origin",
                trigger: "left",
                callback: contextMenuClick,
                items: {
                    "addToKnownWords": { name: "Move to known words" },
                    separator: "---------",
                    "removeFromVocabulary": { name: "Remove from vocabulary" }
                }
            });

            $.contextMenu({
                selector: ".new-word > .origin",
                trigger: "left",
                callback: contextMenuClick,
                items: {
                    "addToLearnWords": { name: "Add to learning words" },
                    separator: "---------",
                    "addToKnownWords": { name: "Add to known words" }
                }
            });

            /* Translate word */

            function translateOrigin(key, word) {
                $.ajax({
                    url: $("#GetTranslations").attr("route"),
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ word: word }),
                    async: true,
                    processData: false,
                    cache: false,
                    success: function (data) {
                        prepareAndShowSaveWordWindow(key, word, data);
                    },
                    error: function (data) {
                        alert("error: " + data);
                    }
                });
            }

            function prepareAndShowSaveWordWindow(key, word, data) {
                prepareSaveWordWindow(key, word, data);
                $("#save-word-modal").modal("show");
            }

            function prepareSaveWordWindow(key, word, translations) {
                $saveWordHeader.html("Select the translation for '" + word + "'");
                $saveWordButtons.html("");
                for (var i = 0; i < translations.length; i++) {
                    var $newModalButton = $("<div>").addClass("modal-button");
                    var $newWord = $("<div>").addClass("origin btn-block save").html(translations[i]);
                    $newModalButton.append($newWord);
                    $saveWordButtons.append($newModalButton);

                    $newWord.on("click", function () {
                        insertWordToVocab(key, word, $(this).html());
                        $("#save-word-modal").modal('hide');
                    });
                }
            }

            /* Save word */

            function insertWordToVocab(key, word, translation) {
                var routeId = "";
                if (key === "addToLearnWords") {
                    routeId = "InsertLearnWord";
                } else if (key === "addToKnownWords") {
                    routeId = "InsertKnownWord";
                }

                $.ajax({
                    url: $("#" + routeId).attr("route"),
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        word: word,
                        translation: translation
                    }),
                    async: true,
                    processData: false,
                    cache: false,
                    success: function () {
                        updateWordHtml(key, word, translation);
                    },
                    error: function (data) {
                        alert("error: " + data);
                    }
                });
            }

            function updateWordHtml(key, word, translation) {
                var $word = $contaxtMenuTrigger.parent();

                if (key === "addToLearnWords") {
                    $word.addClass("learn-word").removeClass("new-word");
                } else if (key === "addToKnownWords") {
                    $word.addClass("known-word").removeClass("new-word");
                }

                $word.children(".translation").html(translation);
            }
        });
    </script>
}