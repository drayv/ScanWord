@using WatchWord.Domain.Entity
@model WatchWord.Web.UI.Models.Materials.MaterialViewModel
@{
    ViewBag.Title = Model.Name;
}

<div class="materialInfo">
    <!--Basic info-->
    <div class="table-layout">
        <div class="table-cell fixed-width-200">
            <img src="@Model.Image" width="@Model.ImageWidth" height="@Model.ImageHeight" alt="Image" />
        </div>
        <div class="table-cell">
            <div><span id="material-name">@Model.Name</span></div>
            <div><span id="material-description">@Model.Description</span></div>
            <br />
        </div>
    </div>
    <!--Parsed words-->
    <div class="words">
        @foreach (var word in Model.Words)
        {
            string typeWord;
            switch (word.Type)
            {
                case VocabType.KnownWord:
                    typeWord = "knownWord";
                    break;
                case VocabType.LearnWord:
                    typeWord = "learnWord";
                    break;
                default:
                    typeWord = "newWord";
                    break;
            }
            <div id="word_@Model.Counter" class=@typeWord>
                <div class="translation">@word.Translation</div>
                <div class="origin">@word.Word</div>
            </div>
            Model.Counter++;
        }
    </div>
    <!--For JS-->
    <div id="GetTranslations" route="@Url.Action("GetTranslations", "Vocabulary")"></div>
</div>

@section Scripts {
    <script>
        $(function () {
            function translate(word) {
                $.ajax({
                    url: $("#GetTranslations").attr("route"),
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ word: word }),
                    async: true,
                    processData: false,
                    cache: false,
                    success: function (data) {
                        alert(data);
                    },
                    error: function (data) {
                        alert("error: " + data);
                    }
                });
            }

            function contextMenuClick(key, options) {
                var m = "clicked: " + key + ", " + options.selector + ", " + options.$trigger.attr("id");
                window.console && console.log(m) || alert(m);

                if (key === "addToLearnWords" || key === "addToKnownWords") {
                    var word = $("#" + options.$trigger.attr("id") + " > .origin")[0].innerHTML || "";
                    translate(word);
                }
            }

            $.contextMenu({
                selector: ".knownWord",
                trigger: "left",
                callback: contextMenuClick,
                items: {
                    "addToLearnWords": { name: "Move to learning words" },
                    separator: "---------",
                    "removeFromVocabulary": { name: "Remove from vocabulary" }
                }
            });

            $.contextMenu({
                selector: ".learnWord",
                trigger: "left",
                callback: contextMenuClick,
                items: {
                    "addToKnownWords": { name: "Move to known words" },
                    separator: "---------",
                    "removeFromVocabulary": { name: "Remove from vocabulary" }
                }
            });

            $.contextMenu({
                selector: ".newWord",
                trigger: "left",
                callback: contextMenuClick,
                items: {
                    "addToLearnWords": { name: "Add to learning words" },
                    separator: "---------",
                    "addToKnownWords": { name: "Add to known words" }
                }
            });
        });
    </script>
}